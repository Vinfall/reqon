= Reqon 手册 =

== Reqon 规则 ==

Reqon 规则由[[#匹配模式|匹配模式]]、[[#类型|类型]]和[[#动作|动作]] 构成。

一个请求如果与非禁用规则的匹配模式和类型相匹配，将根据该规则拦截并采取相应动作。

=== 匹配模式 ===

匹配模式用来筛选出匹配[[#协议|协议]]、[[#主机|主机]]和[[#路径|路径]]，以及可选的[[#包括和排除|包括和排除]]匹配模式的请求。

==== 协议 ====

支持的协议为 <code>http</code> 和 <code>https</code>。

{|
| <code>http</code>
| 匹配 http 协议的请求。
|-
| <code>https</code>
| 匹配 https 协议的请求。
|-
| <code>http/https</code>
| 同时匹配 http 和 https 协议的请求。
|}

==== 主机 ====

主机匹配可以通过下列方式匹配请求的 URL 中的主机（host）。

{|
| <code>www.example.com</code>
| 匹配完整主机。
|
|-
| <code>*.example.com</code>
| 匹配指定的主机以及它的所有子域名。
| 将会匹配 example.com 的所有子域名，例如 '''www'''.example.com 和 '''good'''.example.com
|-
| <code>www.example.*</code>
| 匹配符合顶级域名列表的指定主机。 （可以配合子域名匹配）
| 需将所需的顶级域名写入到顶级域名列表框（例如 ''com''、''org''）。
|-
| <code>*</code>
| 匹配任何主机。
|
|}

==== 路径 ====

路径匹配可以是通配符 &quot;*&quot; 和所有 URL 路径中允许的字符的任意组合。通配符 &quot;*&quot; 能够匹配路径的任意部分，且可以出现多次。

下面是一些使用路径匹配的示例。

{|
| <code>*</code>
| 匹配任意路径。
|-
| <code>path/a/b/</code>
| 匹配特定路径 &quot;path/a/b/&quot;。
|-
| <code>*b*</code>
| 匹配所有包含 &quot;b&quot; 的路径，只要路径中出现就匹配。
|-
|
| 匹配空路径。
|}

=== 类型 ===

类型代表请求的资源种类。可以匹配一或多种类型，也可以匹配任意类型。下面列出了所有可能的类型。

{|
! 类型
! 细节
|-
| 文档
| 代表浏览器标签页中的顶级 DOM 文档。（main frame）
|-
| 子文档
| 代表附属于其他文档的 DOM 文档（sub frame）
|-
| 样式表
| 代表样式表（.css 文件）。
|-
| 脚本
| 代表可执行脚本（例如 JavaScript）。
|-
| 图像
| 代表图像（例如 &lt;img&gt; 元素载入的内容）。
|-
| 对象
| 代表对象（&lt;object&gt; 和 &lt;embed&gt; 元素的内容）。
|-
| 插件
| 代表由插件发起的请求。（object_subrequest）
|-
| XMLHttpRequest
| 代表 XMLHttpRequest 请求。
|-
| XSLT
| 代表可扩展样式表转换语言（英文：Extensible Stylesheet Language Transformations，缩写为 XSLT）文档。
|-
| Ping
| 代表因点击带有 ping 属性的 &lt;a&gt; 元素时发出的请求。只有 about:config 中 browser.send_pings 属性被启用时才会发出（默认为禁用）。
|-
| Beacon
| 代表信标（[https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API Beacon]）请求。
|-
| XML DTD
| 代表被 XML 文档载入的 DTD 文件。
|-
| Font
| 代表通过 CSS @font-face 规则引入的字体。
|-
| Media
| 代表视频或音频。
|-
| WebSocket
| 代表 [https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API WebSocket] 请求。
|-
| CSP Report
| 代表内容安全策略（[https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP Content Security Policy]）报告。
|-
| Imageset
| 代表加载带 srcset 属性的 &lt;img&gt; 或 &lt;picture&gt; 元素的内容的请求。
|-
| Web Manifest
| 代表加载 Web manifest 的请求。
|-
| Other
| 代表未被归类为上述任何类型的请求。
|}

=== 动作 ===

; [[File:/icons/icon-filter.svg|16px]] 过滤
: 跳过 URL 重定向，并/或移除 URL 查询参数。
; [[File:/icons/icon-redirect.svg|16px]] 重定向
: 将请求重定向至手动配置的目标 URL。
; [[File:/icons/icon-secure.svg|16px]] 加密
: 将不安全的 HTTP 请求升级为 HTTPS 请求。
; [[File:/icons/icon-block.svg|16px]] 拦截
: 在请求被发出之前取消请求。
; [[File:/icons/icon-whitelist.svg|16px]] 白名单
: 白名单并可选地在日志中记录请求。

== 其他 URL 匹配方式 ==

以下匹配器扩展了 [https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/RequestFilter WebRequest API] 的匹配功能。

==== 包括和排除 ====

通过支持通配符 &quot;?&quot; 和 &quot;*&quot;（其中 &quot;?&quot; 匹配任何单个字符，而 &quot;*&quot; 匹配零或多个字符）的字符串匹配，来过滤匹配的请求。也可通过在匹配模式前后加 &quot;/&quot; 字符来使用正则表达式。

包括和排除不区分大小写，而[[#主机|主机]]和[[#路径|路径]]区分大小写。

以下是使用包括和排除模式匹配的示例：

{|
| <code>login</code>
| 匹配所有包括 &quot;login&quot; 的 URL。
|-
| <code>log?n</code>
| 匹配包括例如 &quot;login&quot; 或者 &quot;logon&quot; 等等的 URL。
|-
| <code>a*b</code>
| 匹配先后出现 &quot;a&quot; 和 &quot;b&quot; 的 URL。
|-
| <code>/[?&]a=\d+(&|$)/</code>
| 匹配包含参数 &quot;a&quot; 的 URL，该参数的值为数字。
|}

=== Match by origin ===

按照跨域情况过滤匹配的规则。

{|
| Any
| 匹配任意跨域情况的请求。
|-
| Same domain
| 匹配同域名的请求。
|-
| Same origin
| 匹配同源的请求。按照[https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy 同源策略]判定。
|-
| Third party domain
| 匹配第三方域名的请求。
|-
| Third party origin
| 匹配第三方源的请求。
|}

== Rule priorities ==

# 白名单规则
# 拦截规则
# 加密规则
# 重定向规则
# 过滤规则

== 去除 URL 参数 ==

过滤规则支持去除 URL 参数。可以在要去除的 URL 参数的名称中使用通配符 &quot;*&quot; 和 &quot;?&quot;，或者正则表达式。

下面是去除 URL 参数的示例。

{|
| <code>utm_source</code>
| 去除 &quot;utm_source&quot; 参数。
|-
| <code>utm_*</code>
| 去除所有以 &quot;utm_&quot; 开头的参数。
|-
| <code>/[0-9]+/</code>
| 去除所有参数名称仅由数字构成的参数。
|}

=== 反转要去除的请求参数选项 ===

仅保留参数列表中所定义的参数，移除所有其他参数。

=== 移除全部请求参数选项 ===

从匹配的请求中移除所有 URL 查询参数。

== 使用模式捕获重定向 ==

重定向规则支持将请求重定向至一个从原始请求 URL 修改而来的 URL。可以使用参数展开来使用和更改目标 URL 的某些组成部分（命名参数）；也可以使用重定向指令，更改目标 URL 的某些组成部分（命名参数），比如只更改原始请求 URL 的端口。

这两种方法可以结合使用。将首先解析并应用重定向指令，再轮到参数扩展。

可以在重定向指令中使用参数展开。

=== 参数展开 ===

<pre>{parameter}</pre>
访问原始请求 URL 中的某个命名参数。本节末尾列出了可用的命名参数。

参数展开支持以下字符串操作语法：

==== 替换子字符串 ====

<pre>{parameter/pattern/replacement}</pre>

将首个匹配 <code>pattern</code> 的子字符串替换为 <code>replacement</code>。

<pre>{parameter//pattern/replacement}</pre>

将所有匹配 <code>pattern</code> 的子字符串替换为 <code>replacement</code>。

匹配模式 <code>pattern</code> 使用正则表达式编写。<code>replacement</code> 中支持使用一些特殊替换，包括引用捕获组（capture group），下面的表格描述了支持的特殊替换。

{|
| <code>$n</code>
| 插入第 n 个捕获组，从 1 开始计数。
|-
| <code>$`</code>
| 插入被匹配到的子字符串之前的部分。
|-
| <code>$'</code>
| 插入被匹配到的子字符串之后的部分。
|-
| <code>$&</code>
| 插入被匹配到的子字符串。
|-
| <code>$$</code>
| 插入一个 &quot;$&quot; 字符。
|}

==== 提取子字符串 ====

<pre>{parameter:offset:length}</pre>

提取扩展参数的一个部分。偏移量 <code>offset</code> 确定起始位置，从 0 开始计数；如果为负值，则从字符串结尾开始算起。

==== 解码和编码 ====

<pre>{parameter|encodingRule}</pre>

对匹配模式的展开值进行解码或编码操作。

{|
| <code>encodeURI</code>
| 将值编码为 URI。不编码以下字符：&quot;:&quot;、&quot;/&quot;、&quot;;&quot;，和 &quot;?&quot;。
|-
| <code>decodeURI</code>
| 将值作为 URI 解码。
|-
| <code>encodeURIComponent</code>
| 将值编码为 URI 组件。会编码所有 URI 保留字符。
|-
| <code>decodeURIComponent</code>
| 将值作为 URI 组件解码。
|-
| <code>encodeBase64</code>
| 将值编码为 Base64 字符串。
|-
| <code>decodeBase64</code>
| 将值作为 Base64 字符串解码。
|}

==== 合并参数展开操作 ====

<pre>{parameter(manipulation1)|(manipulation2)...|(manipulationN)}</pre>
可以使用管道符 &quot;|&quot; 链式调用多个字符串操作规则。输出结果是被依次操作过的参数值。

==== 示例 ====

{|
| <code>https://{hostname}/new/path</code>
| 复用原始请求中的主机名。
|-
| <code>https://{hostname/([a-z]{2}).*/$1}/new/path</code>
| 提取原始请求中的主机名的一部分并复用。
|-
| <code>https://{hostname::-3|/.co/.com}/new/path</code>
| 去除原始请求中的主机名中的最后 3 个字符，再将其中的第一个 &quot;.co&quot; 替换为 &quot;.com&quot，再复用。
|-
| <code>{search.url|decodeURIComponent}</code>
| 捕获原始请求的查询参数中的 &quot;url&quot; 参数，并将其解码，作为重定向目标。
|}

=== 重定向指令 ===

<pre>[parameter=value]</pre>

替换原始请求的特定组成部分。本节末尾列出了可用的命名 URL 参数（named URL parameters）。

<pre>[parameter={parameter<manipulations>}]</pre>

可以通过上述参数扩展语法对重定向指令的值进行参数化（parametrize）。

==== 示例 ====

{|
| <code>[port=8080]</code>
| 将原始请求的端口重定向至 8080。
|-
| <code>[port=8080][hostname=localhost]</code>
| 将原始请求的主机重定向至 localhost:8080。
|-
| <code>[port=8080][hostname=localhost][hash={pathname}]</code>
| 将原始请求的主机重定向至 localhost:8080，并将哈希（hash，<code>#</code>）更改为原始请求的主机名。
|}

=== 命名参数列表 ===

下表列出了支持的参数名称以及输出示例。

作为输入的示例地址：

<pre>https://www.example.com:8080/some/path?query=value#hash</pre>
{|
! 名称
! 输出
|-
| protocol
| <code>https:</code>
|-
| hostname
| <code>www.example.com</code>
|-
| port
| <code>:8080</code>
|-
| pathname
| <code>/some/path</code>
|-
| search
| <code>?query=value</code>
|-
| search.query
| <code>value</code>
|-
| hash
| <code>#hash</code>
|-
| host
| <code>www.example.com:8080</code>
|-
| origin
| <code>https://www.example.com:8080</code>
|-
| href
| <code>https://www.example.com:8080/some/path?query=value#hash</code>
|}

此手册页面基于以下 MDN 维基文档中的资料编写，以 [http://creativecommons.org/licenses/by-sa/2.5/ CC-BY-SA 2.5] 协议授权。

# [https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Match_patterns Match patterns] by [https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Match_patterns$history Mozilla Contributors] is licensed under [http://creativecommons.org/licenses/by-sa/2.5/ CC-BY-SA 2.5].
# [https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/webRequest/ResourceType webRequest.ResourceType] by [https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/webRequest/ResourceType$history Mozilla Contributors] is licensed under [http://creativecommons.org/licenses/by-sa/2.5/ CC-BY-SA 2.5].
# [https://developer.mozilla.org/en-US/docs/Web/API/URL URL] by [https://developer.mozilla.org/en-US/docs/Web/API/URL$history Mozilla Contributors] is licensed under [http://creativecommons.org/licenses/by-sa/2.5/ CC-BY-SA 2.5].
